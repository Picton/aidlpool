apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        applicationId "com.xiaowei.aidlclient"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}
/**
 * 接口版本号
 */
ext {
    versionCode = '1.0'
}

/**
 * @return formattedDate
 */
def getBuildTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

/**
 *
 * @param isRelease
 * @param isProguard
 * @return buildName
 */
def getBuildName(boolean isRelease) {
    def buildName = "mdm_v" + ext.versionCode + "." + getBuildTime()
    if (!isRelease) {
        buildName = buildName + "_debug"
    }
    return buildName + ".jar"
}
//打jar 包
task exportAidlJar(type: Jar, dependsOn: "build") {
    //导出的jar文件名称
    archiveName = getBuildName(true)//
    //从哪个目录打包jar
    from "build/intermediates/javac/debug/classes/" //核心，将.class 文件编译成Jar包

    //  from 'src/main/aidl/'
    //导出的jar文件的存放目录（未指定则默认存放在build/libs下）
    destinationDir = file('build/outputs/')
    exclude('com/xiaowei/aidlclient/MainActivity.class', 'com/xiaowei/aidlclient/BuildConfig.class', 'com/xiaowei/aidlclient/R.class')


    include('com/**/*.class')    //编译完成后在java目录下生成对应的class的路径
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
